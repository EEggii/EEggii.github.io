---
published: true
title: 구글 클라우드 플랫폼 (2)
layout: post
---
지난 시간에 이어서 이번에도 구글 클라우드 플랫폼에 대해서 살펴볼 예정이다. 그 중에서도 인스턴스를 묶어서 관리할 수 있는 Instance Group과 HTTP(S) 요청을 설정된 인스턴스 그룹으로 분배해주는 Load Balancer에 대해서 간단히 살펴보도록 하겠다.
  
  
  
# Scaling
웹 서버를 구동하는 인스턴스는 그 스펙에 따라 처리할 수 있는 요청량이 다르다. 높은 스펙을 가지면 많은 요청을 처리할 수 있고 낮은 스펙이면 그만큼 처리할 수 있는 요청량이 줄어든다. 그리고 인스턴스가 높은 스펙을 가지려면 비용이 많이든다. 더 좋은 성능의 부품을 장착해야 하기 때문이다. 이렇게 단일 서버 인스턴스의 스펙을 높여 성능을 높이는 것을 스케일 업(Scale up)이라고 한다. 이런 High memory와 High CPU로 인스턴스를 업그레이드 하는 것이 언제나 옳은 것은 아니다. 비싼 돈을 들여 고성능의 장비로 구성한 인스턴스라도 항상 그 성능에 맞는 요청량을 받아들이고 처리하는 경우는 드물다. 비용 대비 효율적이지 못한 것이다. 이와 다르게 스케일 아웃(Scale out)은 일반적인 성능의 인스턴스를 사용하다가 요청량이 많아지는 경우 같은 스펙의 인스턴스를 추가하여 요청량을 분산 및 처리하는 방식이다.  요청량이 많을 때나 원하는 시간대에 인스턴스를 늘리고 그 외의 시간에는 인스턴스를 줄여서 인스턴스 사용이 유동적이기 때문에 스케일 업에 비해 비용이 저렴하다.
  
  
  
# Instance Group
구글 클라우드 플랫폼에서 스케일 아웃 방식의 서버를 구성하려면 인스턴스 그룹과 요청을 분산시켜주는 로드 밸런서가 필요하다. 먼저 인스턴스 그룹은 말 그대로 인스턴스가 모여있는 묶음, 그룹이다. 인스턴스 그룹은 두 가지 타입이 있다. 사용자가 생성한 독립적인 인스턴스들 끼리 묶어놓은, 즉 단순 그루핑된 Unmanaged Group과 인스턴스 템플릿을 이용하여 생성된 Managed Group이 있다. 매니지드 그룹에서만 로드 밸런서를 활용한 오토 스케일링이 가능하다. 
  
  
  
# Load Balnacer
다음은 로드 밸런서 서비스의 구성 및 흐름을 나타내는 이미지다.
  
![로드 밸런서의 구성](https://cloud.githubusercontent.com/assets/6007758/16829076/bb6c612e-49d0-11e6-95d7-93cf16cf2eed.png)
인터넷으로부터 들어온 요청은 포워딩 룰에 따라 프록시 서버로 전달된다. 프록시 서버에서 들어온 요청을 Url Map에 매핑하고 백엔드 서비스를 통해 백엔드로 보낸다. 여기서 백엔드는 인스턴스 그룹(Managed group)이 되고, 로드 밸런서는 헬스 체크를 통해 백엔드에 있는 인스턴스들의 상태를 확인한다.
  
  
  
# Auto Scale Out - Instance Group
이제 직접 해보자. 먼저 인스턴스 그룹이 필요하다. 오토 스케일링이 가능해야 하기 때문에 인스턴스 템플릿을 만들고 템플릿을 적용한 인스턴스 그룹을 생성해야 한다.
  
![템플릿 만들기](https://cloud.githubusercontent.com/assets/6007758/16829397/f94a6b74-49d2-11e6-9b3f-770d9ad50d1f.png)
지난 번에 사용했던 컴퓨트 엔진 메뉴 중 인스턴스 템플릿 메뉴를 선택하고 생성버튼을 클릭하면 위와 같은 화면을 볼 수 있다. 인스턴스 설정과 비슷하게 머신 유형과 부팅 이미지, API 엑세스, 방화벽 규칙을 설정하고 자동화 메뉴의 시작 스크립트에 아파치를 설치하는 쉘 스크립트를 작성한다. (지난 포스트 참조(링크)[http://blog.eegg.io/2016/06/24/1.html])
 
템플릿을 생성한 뒤 인스턴스 그룹을 생성한다. 컴퓨트 엔진 서비스의 좌측 메뉴 중 인스턴스 그룹 메뉴를 선택하고 인스턴스 그룹 만들기 버튼을 클릭하면 다음과 같은 화면을 볼 수 있다.  
![그룹 만들기](https://cloud.githubusercontent.com/assets/6007758/16829870/5b6606d0-49d6-11e6-809c-5c5bb1d00383.png)
인스턴스 템플릿 메뉴에서 방금 전에 생성한 템플릿을 선택하고 자동 확장 메뉴를 켜기로 설정한다. 자오토 스케일링 조건을 인스턴스 CPU의 사용율 60%로 설정하고 인스턴스의 최소 개수 및 최대 개수를 설정한다. 조건은 상황에 맞게 변경할 수 있다. (이 후에 로드 밸런서의 부하 분산을 확인하기 위해 최소 개수를 2개로 설정하자. 그렇다면 해당 그룹으로 묶인 두 개의 인스턴스가 생성된다.)
  
  
  
# Auto Scale Out - Load Balancer
이제 로드 밸런서 차례다. 로드 밸런서는 네트워킹 > 부하 분산 메뉴에서 생성할 수 있다. 
![부하 분산](https://cloud.githubusercontent.com/assets/6007758/16830202/7662a5cc-49d8-11e6-9312-179bf70ccf87.png)
  
  
부하 분산 메뉴를 들어가서 부하 분산기 만들기 버튼을 누르면 아래와 같은 화면을 볼 수 있다.
![부하 분산기 생성](https://cloud.githubusercontent.com/assets/6007758/16830230/9e9ecf3e-49d8-11e6-938a-bacea7b7c403.png)
  
  
지원하는 프로토콜 별로 로드 밸런서를 생성할 수 있고 여기에선 HTTP(S) 부하 분산기를 구성해보겠다. (실제로 현재 일하는 회사의 실제 서비스 제공에 사용되는 서버도 로드 밸런서에서 제공하는 모든 기능을 사용하고 있지 않다. 사실상 백엔드에 인스턴스 그룹을 등록하고 사용하는 게 전부라서 나머지 기능들은 추후에 다뤄보도록 하겠다.)

먼저 백엔드부터 설정한다. 백엔스 서비스 만들기 버튼을 누르면 아래와 같은 화면을 볼 수 있다.
![백엔드 서비스 생성하기](https://cloud.githubusercontent.com/assets/6007758/16830409/abf91cb0-49d9-11e6-8346-366207efe4b3.png)
이 전에 생성한 인스턴트 그룹을 등록하고 포트 번호를 통해 들어오는 요청을 구분한다. 분산 모드는 CPU 사용률나 속도로 설정할 수 있다.  호스트 및 경로 규칙은 트래픽의 전달 방식을 결정하는 것이다. 경로 규칙에 일치하지 않는 트래픽은 기본 서비스로 전달된다. 필요할 경우, 추가하면 된다. 프론트 엔드 구성은 클라이언트가 요청이 직접적으로 들어오는 IP를 지정하는 과정을 진행하는 것이다. 고정 아이피를 하나 예약해서 지정해준다. 모든 과정을 거치고 만들기 버튼을 눌러 마무리한다. 그리고 로드 밸런서에 등록된 아이피로 접속해 보자.
  
![초기 화면](https://cloud.githubusercontent.com/assets/6007758/16830656/34646108-49db-11e6-924e-3129ad3a872e.png)
로드 밸런서를 생성하자마자 로드 밸런서의 아이피로 접속하면 위와 같은 화면을 볼 수 있다. 로드 밸런서의 초기설정이 진행되기 때문에 30초 정도의 시간이 필요하다. 30초를 기다리고 다시 접속하면 아파치 서버의 기본 인덱스 페이지를 확인 할 수 있다.
  
![접속 확인](https://cloud.githubusercontent.com/assets/6007758/16830726/93f99110-49db-11e6-9f03-91768c26130e.png)
경로 규칙와 같은 설정을 따로 하지 않았다면 기본적으로 로드 밸런서는 부하를 임의로 분산시킨다. 각 인스턴스에 접속해서 /www/log/apache2/access.log (아파치 기본 접속 로그 경로) 경로에서 로그를 확인해보면 해당 접속이 어떤 인스턴스로 접근이 된 것인지 확인 할 수 있다.
  
  
  
# 마무리
GCP의 대부분의 기능은 동등한 REST 요청으로도 이용할 수 있다. 예를 들어, 인스턴스 그룹의 최소 인스턴스 개수의 변경을 GCP 프로젝트의 인스턴스 그룹에 접근하는 요청에 minNumReplicas 인자를 추가해서 보내면 커맨드 창에서도 할 수 있는 것이다. (물론 권한 설정이 필요하다.) 이러한 REST 요청을 Cron 작업으로 등록해서 일정 시간 대에 스케일 아웃을 수행할 수 있다.
  
  
  
# Next
다음 시간에는 데이터를 저장하는 인스턴스인 Cloud SQL에 대해서 살펴보도록 하겠다. 그리고 기회가 된다면 로드 밸랜서의 다양한 기능을 살펴보는 시간을 갖도록 하겠다.